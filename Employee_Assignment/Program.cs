
//Create the following classes
//Employee
//   Prop	
//	string Name -> no blanks
//	int EmpNo -> readonly, autogenerated
//	short DeptNo -> > 0

//    abstract decimal Basic
//   Methods
//    abstract decimal CalcNetSalary()


//Manager: Employee
//   Prop

//    string Designation -> cant be blank


//GeneralManager : Manager
//   Prop
// 	string Perks -> no validations

//CEO : Employee
//      Make CalNetSalary() a sealed method

//NOTE : Overloaded constructors in all classes calling their base class constructor
//All classes must implement IDbFunctions interface
//All classes to override the abstract members defined in the base class(Employee). Basic property to have different validation in different classes.
//CalcNetSalary() to have different validation in different classes.






using Employee_Assignment;
using System.Security.Cryptography.X509Certificates;

namespace Employee_Assignment
{
    internal class Program
    {
        static void Main()
        {
            Manager o = new Manager("ram",10000,1,"full stack");
            o.M_Display();
            o.Insert();
            o.Delete();
            o.Update();
            Console.WriteLine();

            GeneralManager o2 = new GeneralManager("sham", 100000, 2, "back end", "diwali");
            o2.G_Display();
            o2.Insert();
            o2.Delete();
            o2.Update();
            Console.WriteLine();


            CEO o3 = new CEO("ganman",30000,4);
            o3.C_Display();
            o3.Insert();
            o3.Delete();
            o3.Update();
            Console.WriteLine();

        }
    }

    public interface IDbFuction
    {

        void Insert();
        void Update();
        void Delete();
    }
    public abstract class Employee: IDbFuction
    {
       
        private string name;
        private static int empNo = 0;
        protected  decimal basic;
        private short deptNo;

        public string Name
        {
            set
            {
                if (value != "")
                    name = value;
                else
                    Console.WriteLine("Invalid value for name");
            }
            get
            {
                return name;
            }
        }

       
        public int EMPNO
        {
            get; 
        }



        
        public abstract decimal BASIC
        {
            set;
            get;
            
        }

       
        public short DEPTNO
        {
            set
            {
                if (value > 0)

                    deptNo = value;
                else
                    Console.WriteLine("Invalid value for deptNo");
            }
            get
            {
                return deptNo;
            }
        }

        public abstract decimal netsalary();             // declaring in constructor 

        public Employee(string name = "default", decimal basic = 1000, short deptNo = 1)
        {
            this.EMPNO = ++empNo;
            this.Name = name;
            this.BASIC= basic;
            this.DEPTNO = deptNo;
          
        }

        public void Display()
        {
            Console.WriteLine(EMPNO + ", " + Name + ", " + BASIC + ", " + DEPTNO + ", ");
        }

        public void Insert()
        {
            Console.WriteLine("INSERT employee");
        }

        public void Update()
        {
            Console.WriteLine("update employee");
        }

        public void Delete()
        {
            Console.WriteLine("delete employee");
        }
    }

    public class Manager : Employee,IDbFuction
    {
        private string Designation;

        public string DESIGNATION
        {
            set
            {
                if (value != "")
                    Designation = value;
                else
                    Console.WriteLine("can't be blank");
            }
            get
            {
                return Designation;
            }
        }

        public override decimal BASIC 
        { 
            
            set
            {
                if (value < 400000 && value > 1000)
                    basic = value;
                else
                    Console.WriteLine("Invalid basic");
            }
            get 
            { 
                return basic; 
            }
        }

        public Manager(string name = "default", decimal basic = 1000, short deptNo = 1,string Designation="") :base(name,basic,deptNo)
        {
            this.DESIGNATION= Designation;
        }



        public override decimal netsalary()
        {
            //throw new NotImplementedException();
            // Console.WriteLine("");
            return (BASIC - BASIC / 18);
        }

        public void M_Display()
        {
            Console.WriteLine("EmpId: "+EMPNO+" - Name: "+Name+" - Basic: "+BASIC+" - DeptNo: "+DEPTNO+" - Designation: "+DESIGNATION);
        }
    }

    public class GeneralManager : Manager,IDbFuction
    {
        private string Perks;
        public string PERKS
        {
            set
            {
                Perks = value;
            }
            get
            {
                return Perks;
            }

        }

        public override decimal BASIC
        {

            set
            {
                if (value < 400000 && value > 1000)
                    basic = value;
                else
                    Console.WriteLine("Invalid basic");
            }
            get
            {
                return basic;
            }
        }

        public GeneralManager(string name = "default", decimal basic = 1000, short deptNo = 1, string Designation = "",string perks=""):base(name,basic,deptNo,Designation)
        {
            this.PERKS = perks;
        }

        public override decimal netsalary()
        {
            //throw new NotImplementedException();
            // Console.WriteLine("");
            return (BASIC - BASIC / 12);
        }

        public void G_Display()
        {
            Console.WriteLine("EmpId: " + EMPNO + " - Name: " + Name + " - Basic: " + BASIC + " - DeptNo: " + DEPTNO + " - Designation: " + DESIGNATION+" - perks: "+PERKS);
        }

    }

    public class CEO : Employee, IDbFuction
    {
        public override decimal BASIC {
             set
             {

                if (value < 150000 && value > 10000)
                    basic = value;
                else
                    Console.WriteLine("invalid basic");
             }
            get 
            {
                return basic;
            }
        }

        public CEO(string name = "default", decimal basic = 1000, short deptNo = 1):base(name,basic,deptNo)
        {

        }

        public sealed override decimal netsalary()
        {
            return (BASIC - BASIC / 5);
        }
         public void C_Display()
         {
            Console.WriteLine("EmpId: " + EMPNO + " - Name: " + Name + " - Basic: " + BASIC + " - DeptNo: " + DEPTNO);

         }
    }

}

